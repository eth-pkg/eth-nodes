name: network-tests
description: tests for different networks
inputs:
  cl_name:
    description: "cl name"
    required: true
  el_name:
    description: "el name"
    required: true
  validator_name:
    description: "validator name"
    required: true  
  network:
    description: "Ethereum network name"
    required: true

runs:
  using: composite
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Remove OpenJDK
      run: |
        sudo apt-get purge -y openjdk-*
        sudo apt-get autoremove -y
        sudo apt-get clean
      shell: bash



    - name: Setup Java
      run: |
        sudo apt -y install wget curl
        wget https://download.oracle.com/java/21/archive/jdk-21.0.2_linux-x64_bin.deb
        sudo apt install ./jdk-21.0.2_linux-x64_bin.deb
        echo "export JAVA_HOME=/usr/lib/jvm/jdk-21" | sudo tee /etc/profile.d/jdk.sh
        echo "export export PATH=\$PATH:\$JAVA_HOME/bin" | sudo tee -a /etc/profile.d/jdk.sh
        sudo ln -s /usr/lib/jvm/jdk-21-oracle-x64 /usr/lib/jvm/jdk-21
        source /etc/profile.d/jdk.sh
        echo "/etc/profile.d/jdk.sh" >> $GITHUB_PATH
        echo "/usr/lib/jvm/jdk-21-oracle-x64" >> $GITHUB_PATH
        echo "/usr/lib/jvm/jdk-21/bin" >> $GITHUB_PATH
        echo "JAVA_HOME=/usr/lib/jvm/jdk-21" >> $GITHUB_ENV
        echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
        sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-21/bin/java 1
        sudo update-alternatives --set java "$JAVA_HOME/bin/java"
      shell: bash

    - name: Checkout dependency repository
      uses: actions/checkout@v4
      with:
        repository: eth-pkg/pkg-builder
        ref: main
        path: pkg-builder

    - name: Install pkg-builder
      run: |
        cd pkg-builder
        cargo build --release
        mkdir -p ${HOME}/.local/bin
        mv target/release/pkg-builder ${HOME}/.local/bin
        # add to path the prebuilt debcrafter binaries as well
        cp bin_dependencies/debcrafter_* ${HOME}/.local/bin
        chmod +x ${HOME}/.local/bin/pkg-builder
        chmod +x ${HOME}/.local/bin/debcrafter_*
        echo "${HOME}/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Sbuild setup
      run: |
        sudo apt update
        # Note this is an older version of sbuild, no need to patch it, yet
        sudo apt install -y debhelper schroot ubuntu-dev-tools autopkgtest vmdb2 qemu-system-x86
        sudo apt install -y pkg-config libssl-dev uidmap
        sudo apt install -y libfilesys-df-perl libmime-lite-perl
        # change this into actually built version and cache it
        wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/sbuild_0.85.6_all.deb
        wget https://github.com/eth-pkg/sbuild-ubuntu/releases/download/0.85-6-1/libsbuild-perl_0.85.6_all.deb
        sudo dpkg -i sbuild_0.85.6_all.deb libsbuild-perl_0.85.6_all.deb || true
      shell: bash

    - name: Create chroot env
      run: |
        pwd && ls -al
        cd releases/noble/all/eth-node-regtest/0.0.1-2 && pkg-builder env create
        echo "${HOME}/.cache/sbuild/noble-amd64.tar.gz" >> $GITHUB_PATH
      shell: bash

    - name: Add eth-nodes repository
      run: |
        sudo curl -fsSL https://packages.eth-pkg.com/keys/ethpkg-archive-keyring.asc -o /usr/share/keyrings/ethpkg-archive-keyring.asc
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/ethpkg-archive-keyring.asc] http://packages.eth-pkg.com/noble-main noble main" | sudo tee -a /etc/apt/sources.list.d/ethpkg.list
        sudo apt update
      shell: bash

    - name: Install dotnet
      run: |
        sudo apt update
        sudo apt install -y aspnetcore-runtime-8.0
      shell: bash

    - name: Install node.js dep
      run: |
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt install -y nodejs
      shell: bash
    # caches packages not to hit the repository in each CI run
    - name: Cache apt packages
      uses: eth-pkg/apt-deb-cache@v0.2.4
      with:
        packages: |
          eth-node-besu \
          eth-node-erigon \
          eth-node-geth \
          eth-node-nethermind eth-node-reth \
          eth-node-lighthouse \
          eth-node-lodestar \
          eth-node-nimbus-eth2 \
          eth-node-prysm \
          eth-node-teku \
          zcli \ 
          eth2-testnet-genesis \
          eth2-val-tools \
          ethereum-genesis-generator

    - name: Build clients
      run: |
        cd releases/noble/all
        mkdir ${HOME}/packages

        # network configs, not the same as client configs
        cd $HOME/work/eth-nodes/eth-nodes/releases/noble/all
        cd eth-node-${{ inputs.network }}-config/0.0.1-1
        pkg-builder package  --run-piuparts false --run-autopkgtest false --run-lintian true
        pkg-builder verify --no-package true 
        cd $HOME/.pkg-builder/packages/noble/eth-node-${{ inputs.network }}-config-0.0.1-1
        ls
        cp eth-node-${{ inputs.network }}-config_0.0.1-1_all.deb ${HOME}/packages/

        # execution client 
        cd $HOME/work/eth-nodes/eth-nodes/releases/noble/all
        cd eth-node-${{ inputs.el_name }}-${{ inputs.network }}/0.0.1-2
        pkg-builder package  --run-piuparts false --run-autopkgtest false --run-lintian true
        pkg-builder verify --no-package true 
        cd $HOME/.pkg-builder/packages/noble/eth-node-${{ inputs.el_name }}-${{ inputs.network }}-0.0.1-2
        ls
        cp eth-node-${{ inputs.el_name }}-${{ inputs.network }}_0.0.1-2_all.deb ${HOME}/packages/

        # consensus client 
        cd $HOME/work/eth-nodes/eth-nodes/releases/noble/all
        cd eth-node-${{ inputs.cl_name }}-${{ inputs.network }}/0.0.1-2
        pkg-builder package  --run-piuparts false --run-autopkgtest false --run-lintian true
        pkg-builder verify --no-package true 
        cd $HOME/.pkg-builder/packages/noble/eth-node-${{ inputs.cl_name }}-${{ inputs.network }}-0.0.1-2
        ls
        cp eth-node-${{ inputs.cl_name }}-${{ inputs.network }}_0.0.1-2_all.deb ${HOME}/packages/

        # validator 
        cd $HOME/work/eth-nodes/eth-nodes/releases/noble/all
        cd eth-node-${{inputs.validator_name}}-validator-${{ inputs.network }}/0.0.1-2
        pkg-builder package  --run-piuparts false --run-autopkgtest false --run-lintian true
        pkg-builder verify --no-package true 
        cd $HOME/.pkg-builder/packages/noble/eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }}-0.0.1-2
        ls
        cp eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }}_0.0.1-2_all.deb ${HOME}/packages/

        echo "${HOME}/packages" >> $GITHUB_PATH

      shell: bash
    - name: Run Service Tests
      run: |
        java --version 
        which java 
        sudo dpkg -i $HOME/packages/eth-node-${{ inputs.network }}-config_0.0.1-1_all.deb
        # have to install in one go 
        sudo dpkg -i $HOME/packages/eth-node-${{ inputs.el_name }}-${{ inputs.network }}_0.0.1-2_all.deb \
          $HOME/packages/eth-node-${{ inputs.cl_name }}-${{ inputs.network }}_0.0.1-2_all.deb \
          $HOME/packages/eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }}_0.0.1-2_all.deb  
        echo "Waiting for 60 seconds for nodes to check successful startup..."
        sleep 60
        # check if execution client is active 
        if systemctl is-active --quiet eth-node-${{ inputs.el_name }}-${{ inputs.network }}.service; then
          echo "eth-node-${{ inputs.el_name }}-${{ inputs.network }} is active"
        else
          echo "eth-node-${{ inputs.el_name }}-${{ inputs.network }} is not active" >&2
          echo "Fetching logs for eth-node-${{ inputs.el_name }}-${{ inputs.network }}..."
          journalctl -u eth-node-${{ inputs.el_name }}-${{ inputs.network }}.service --no-pager -n 100
          exit 1
        fi
        # check if consensus client is active 
        if systemctl is-active --quiet eth-node-${{ inputs.cl_name }}-${{ inputs.network }}.service; then
          echo "eth-node-${{ inputs.cl_name }}-${{ inputs.network }} is active"
        else
          echo "eth-node-${{ inputs.cl_name }}-${{ inputs.network }} is not active" >&2
          echo "Fetching logs for eth-node-${{ inputs.cl_name }}-${{ inputs.network }}..."
          journalctl -u eth-node-${{ inputs.cl_name }}-${{ inputs.network }}.service --no-pager -n 100
          exit 1
        fi

        # check if validator client is active 
        if systemctl is-active --quiet eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }}.service; then
          echo "eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }} is active"
        else
          echo "eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }} is not active" >&2
          echo "Fetching logs for eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }}..."
          journalctl -u eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }}.service --no-pager -n 100
          exit 1
        fi
        #   shell: bash
        # - name: Run API tests
        #   run: |
        # TESTS 
        echo "Waiting for 180 seconds for nodes to check successful startup..."
        # on localhost this is much faster, as keys are imported quicker on a faster machine
        sleep 180 # it takes time to include the validators 
        # Check beacon state
        echo ""
        curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' http://localhost:8545
        echo ""


        # TEST if they are actually running correctly 
        # Check if execution client is syncing
        EL_SYNCING=$(curl -s -X POST --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":2}' -H "Content-Type: application/json" http://localhost:8545)
        if [ "$(echo $EL_SYNCING | jq '.result')" == "false" ]; then
          echo "Execution client is already synced"
          echo "$EL_SYNCING"
        else
          echo "Execution client is still syncing"
          echo "$CL_SYNCING"
          # TODO problem with nethermind/erigon
          # exit 1
        fi

        # Check if consensus client is syncing
        CL_SYNCING=$(curl -s -X GET -H "Content-Type: application/json" http://localhost:5052/eth/v1/node/syncing)
        if [ "$(echo $CL_SYNCING | jq '.data.is_syncing')" == "false" ]; then
          echo "Consensus client is already synced"
          echo "$CL_SYNCING"
        else
          echo "Consensus client is still syncing"
          echo "$CL_SYNCING"
          # Might be not a bug https://github.com/sigp/lighthouse/issues/6425
          # same for teku, lighthouse, and more ...
          # exit 1
        fi

        # uncommenting, could it be a bug with blocknumber???
        block_number_result=$(curl -s -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":3}' -H "Content-Type: application/json" http://localhost:8545 )
        if [ $(echo $block_number_result| jq -r '.result') != "0x0" ]; then
            echo "Block number is not zero. Block production started..."
        else
            echo "Block number is zero."
            echo "$block_number_result"
            echo "Fetching logs for eth-node-${{ inputs.el_name }}-${{ inputs.network }}..."
            journalctl -u eth-node-${{ inputs.el_name }}-${{ inputs.network }}.service --no-pager -n 100
            echo "Fetching logs for eth-node-${{ inputs.cl_name }}-${{ inputs.network }}..."
            journalctl -u eth-node-${{ inputs.cl_name }}-${{ inputs.network }}.service --no-pager -n 100
            echo "eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }} is not active" >&2
            journalctl -u eth-node-${{ inputs.validator_name }}-validator-${{ inputs.network }}.service --no-pager -n 100
            exit 1
        fi

        # Submit example transactions 
        transaction_response=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          --data '{
              "jsonrpc": "2.0",
              "method": "eth_sendRawTransaction",
              "params": ["0x01f86f8205398085e8d4a5100082520894000000000000000000000000000000000000dead872386f26fc1000080c080a09a4d7c7edb084f4323bdf7dd7f2042a8bf069fd64f32934ee91b50f4398f84a4a017e12b64ab00e30299b01c94e6e297ffbed21752ee7986e0ab5744b6a4a2bf72"],
              "id": 4
          }' http://localhost:8545)

        error=$(echo "$transaction_response" | jq -r '.error.message // empty')
        txHash=$(echo "$transaction_response" | jq -r '.result // empty')

        if [ -n "$txHash" ]; then
            echo "Transaction posted successfully. Transaction hash: $txHash"
        elif [ -n "$error" ]; then
            echo "Transaction posting failed: $error"
            exit 1
        else
            echo "Unexpected response: $transaction_response"
            exit 1
        fi


        echo "Waiting for 60 seconds for the transactions to be included..."
        sleep 60 # increase time to https://github.com/eth-pkg/eth-nodes/actions/runs/11304204442/job/31442272249

        response=$(curl -s -X POST http://localhost:8545 \
        -H "Content-Type: application/json" \
        --data '{
            "jsonrpc": "2.0",
            "method": "eth_getTransactionByHash",
            "params": ["'"$txHash"'"],
            "id": 5
        }')

        # Extract blockHash using jq
        blockHash=$(echo $response | jq -r '.result.blockHash')

        # Test if blockHash is null
        if [ "$blockHash" == "null" ] || [ -z "$blockHash" ]; then
            echo "Transaction is not included"
            exit 1
        else
            echo "Transactions is included"
        fi

      shell: bash
