Index: ethereum-genesis-generator-4.0.2/apps/el-gen/generate_genesis.sh
===================================================================
--- ethereum-genesis-generator-4.0.2.orig/apps/el-gen/generate_genesis.sh
+++ ethereum-genesis-generator-4.0.2/apps/el-gen/generate_genesis.sh
@@ -1,5 +1,8 @@
 #!/bin/bash
 
+# Get the directory where the script is located
+SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+
 generate_genesis() {
     set +x
     export CHAIN_ID_HEX="0x$(printf "%x" $CHAIN_ID)"
@@ -25,32 +28,32 @@ generate_genesis() {
     if [ "$CHAIN_ID" == "1" ]; then
         # mainnet shadowfork
         has_fork="4" # deneb
-        cp /apps/el-gen/mainnet/genesis.json $tmp_dir/genesis.json
-        cp /apps/el-gen/mainnet/chainspec.json $tmp_dir/chainspec.json
-        cp /apps/el-gen/mainnet/besu_genesis.json $tmp_dir/besu.json
+        cp "$SCRIPT_DIR/el-gen/mainnet/genesis.json" $tmp_dir/genesis.json
+        cp "$SCRIPT_DIR/el-gen/mainnet/chainspec.json" $tmp_dir/chainspec.json
+        cp "$SCRIPT_DIR/el-gen/mainnet/besu_genesis.json" $tmp_dir/besu.json
     elif [ "$CHAIN_ID" == "11155111" ]; then
         # sepolia shadowfork
         has_fork="4" # deneb
-        cp /apps/el-gen/sepolia/genesis.json $tmp_dir/genesis.json
-        cp /apps/el-gen/sepolia/chainspec.json $tmp_dir/chainspec.json
-        cp /apps/el-gen/sepolia/besu_genesis.json $tmp_dir/besu.json
+        cp "$SCRIPT_DIR/el-gen/sepolia/genesis.json" $tmp_dir/genesis.json
+        cp "$SCRIPT_DIR/el-gen/sepolia/chainspec.json" $tmp_dir/chainspec.json
+        cp "$SCRIPT_DIR/el-gen/sepolia/besu_genesis.json" $tmp_dir/besu.json
     elif [ "$CHAIN_ID" == "17000" ]; then
         # holesky shadowfork
         has_fork="4" # deneb
-        cp /apps/el-gen/holesky/genesis.json $tmp_dir/genesis.json
-        cp /apps/el-gen/holesky/chainspec.json $tmp_dir/chainspec.json
-        cp /apps/el-gen/holesky/besu_genesis.json $tmp_dir/besu.json
+        cp "$SCRIPT_DIR/el-gen/holesky/genesis.json" $tmp_dir/genesis.json
+        cp "$SCRIPT_DIR/el-gen/holesky/chainspec.json" $tmp_dir/chainspec.json
+        cp "$SCRIPT_DIR/el-gen/holesky/besu_genesis.json" $tmp_dir/besu.json
     elif [ "$CHAIN_ID" == "560048" ]; then
         # hoodi shadowfork
         has_fork="5" # electra
-        cp /apps/el-gen/hoodi/genesis.json $tmp_dir/genesis.json
-        cp /apps/el-gen/hoodi/chainspec.json $tmp_dir/chainspec.json
-        cp /apps/el-gen/hoodi/besu_genesis.json $tmp_dir/besu.json
+        cp "$SCRIPT_DIR/el-gen/hoodi/genesis.json" $tmp_dir/genesis.json
+        cp "$SCRIPT_DIR/el-gen/hoodi/chainspec.json" $tmp_dir/chainspec.json
+        cp "$SCRIPT_DIR/el-gen/hoodi/besu_genesis.json" $tmp_dir/besu.json
     else
         # Generate base genesis.json, chainspec.json and besu.json
-        envsubst < /apps/el-gen/tpl-genesis.json   > $tmp_dir/genesis.json
-        envsubst < /apps/el-gen/tpl-chainspec.json > $tmp_dir/chainspec.json
-        envsubst < /apps/el-gen/tpl-besu.json      > $tmp_dir/besu.json
+        envsubst < "$SCRIPT_DIR/el-gen/tpl-genesis.json"   > $tmp_dir/genesis.json
+        envsubst < "$SCRIPT_DIR/el-gen/tpl-chainspec.json" > $tmp_dir/chainspec.json
+        envsubst < "$SCRIPT_DIR/el-gen/tpl-besu.json"      > $tmp_dir/besu.json
         is_shadowfork="0"
         has_fork="0"
     fi
@@ -65,7 +68,7 @@ generate_genesis() {
     if [ "$is_shadowfork" == "0" ]; then
         # Initialize allocations with precompiles
         echo "Adding precompile allocations..."
-        cat /apps/el-gen/precompile-allocs.yaml | yq -c > $tmp_dir/allocations.json
+        cat "$SCRIPT_DIR/el-gen/precompile-allocs.yaml" | yq -c > $tmp_dir/allocations.json
 
         # Add system contracts
         genesis_add_system_contracts $tmp_dir
@@ -155,7 +158,7 @@ genesis_add_allocation() {
 
 genesis_add_system_contracts() {
     tmp_dir=$1
-    system_contracts=$(cat /apps/el-gen/system-contracts.yaml | yq -c)
+    system_contracts=$(cat "$SCRIPT_DIR/el-gen/system-contracts.yaml" | yq -c)
 
     echo "Adding system contracts"
 
Index: ethereum-genesis-generator-4.0.2/entrypoint.sh
===================================================================
--- ethereum-genesis-generator-4.0.2.orig/entrypoint.sh
+++ ethereum-genesis-generator-4.0.2/entrypoint.sh
@@ -1,39 +1,85 @@
 #!/bin/bash -e
 
+# Default values
+DEFAULT_DATA_DIR="data"
+DEFAULT_DEFAULTS_ENV="/etc/ethereum-genesis-generator/defaults/defaults.env"
+DEFAULT_CONFIG_VALUES="/etc/ethereum-genesis-generator/config/values.env"
+DEFAULT_CONFIG_DIR="/etc/ethereum-genesis-generator/config"
+DEFAULT_EL_GEN_PATH="/usr/lib/ethereum-genesis-generator/apps/el-gen/generate_genesis.sh"
+
+# Use defaults or override
+DATA_DIR="${DATA_DIR:-$DEFAULT_DATA_DIR}"
+DEFAULTS_ENV="${DEFAULTS_ENV:-$DEFAULT_DEFAULTS_ENV}"
+CONFIG_VALUES="${CONFIG_VALUES:-$DEFAULT_CONFIG_VALUES}"
+CONFIG_DIR="${CONFIG_DIR:-$DEFAULT_CONFIG_DIR}"
+EL_GEN_PATH="${EL_GEN_PATH:-$DEFAULT_EL_GEN_PATH}"
+
+# Parse command line arguments
+while [[ $# -gt 0 ]]; do
+  case $1 in
+    --data-dir=*)
+      DATA_DIR="${1#*=}"
+      shift
+      ;;
+    --defaults-env=*)
+      DEFAULTS_ENV="${1#*=}"
+      shift
+      ;;
+    --config-values=*)
+      CONFIG_VALUES="${1#*=}"
+      shift
+      ;;
+    --config-dir=*)
+      CONFIG_DIR="${1#*=}"
+      shift
+      ;;
+    --el-gen-path=*)
+      EL_GEN_PATH="${1#*=}"
+      shift
+      ;;
+    *)
+      # Save the command (el, cl, all)
+      if [[ -z "$COMMAND" ]]; then
+        COMMAND="$1"
+      fi
+      shift
+      ;;
+  esac
+done
+
 # Load the default env vars into the environment
-source /defaults/defaults.env
+if [ -f "$DEFAULTS_ENV" ]; then
+    source "$DEFAULTS_ENV"
+fi
 
 # Load the env vars entered by the user
-if [ -f /config/values.env ];
-then
-    source /config/values.env
+if [ -f "$CONFIG_VALUES" ]; then
+    source "$CONFIG_VALUES"
 fi
 
-
 SERVER_ENABLED="${SERVER_ENABLED:-false}"
 SERVER_PORT="${SERVER_PORT:-8000}"
 
-
 gen_shared_files(){
     set -x
     # Shared files
-    mkdir -p /data/metadata
-    if ! [ -f "/data/jwt/jwtsecret" ]; then
-        mkdir -p /data/jwt
-        echo -n 0x$(openssl rand -hex 32 | tr -d "\n") > /data/jwt/jwtsecret
+    mkdir -p "$DATA_DIR/metadata"
+    if ! [ -f "$DATA_DIR/jwt/jwtsecret" ]; then
+        mkdir -p "$DATA_DIR/jwt"
+        echo -n 0x$(openssl rand -hex 32 | tr -d "\n") > "$DATA_DIR/jwt/jwtsecret"
     fi
-    if [ -f "/data/metadata/genesis.json" ]; then
-        terminalTotalDifficulty=$(cat /data/metadata/genesis.json | jq -r '.config.terminalTotalDifficulty | tostring')
-        sed -i "s/TERMINAL_TOTAL_DIFFICULTY:.*/TERMINAL_TOTAL_DIFFICULTY: $terminalTotalDifficulty/" /data/metadata/config.yaml
+    if [ -f "$DATA_DIR/metadata/genesis.json" ]; then
+        terminalTotalDifficulty=$(cat "$DATA_DIR/metadata/genesis.json" | jq -r '.config.terminalTotalDifficulty | tostring')
+        sed -i "s/TERMINAL_TOTAL_DIFFICULTY:.*/TERMINAL_TOTAL_DIFFICULTY: $terminalTotalDifficulty/" "$DATA_DIR/metadata/config.yaml"
     fi
 }
 
 gen_el_config(){
     set -x
-    if ! [ -f "/data/metadata/genesis.json" ]; then
-        mkdir -p /data/metadata
-        source /apps/el-gen/generate_genesis.sh
-        generate_genesis /data/metadata
+    if ! [ -f "$DATA_DIR/metadata/genesis.json" ]; then
+        mkdir -p "$DATA_DIR/metadata"
+        source "$EL_GEN_PATH"
+        generate_genesis "$DATA_DIR/metadata"
     else
         echo "el genesis already exists. skipping generation..."
     fi
@@ -50,46 +96,46 @@ gen_minimal_config() {
   )
 
   for key in "${!replacements[@]}"; do
-    sed -i "s/$key:.*/$key: ${replacements[$key]}/" /data/metadata/config.yaml
+    sed -i "s/$key:.*/$key: ${replacements[$key]}/" "$DATA_DIR/metadata/config.yaml"
   done
 }
 
 gen_cl_config(){
     set -x
     # Consensus layer: Check if genesis already exists
-    if ! [ -f "/data/metadata/genesis.ssz" ]; then
+    if ! [ -f "$DATA_DIR/metadata/genesis.ssz" ]; then
         tmp_dir=$(mktemp -d -t ci-XXXXXXXXXX)
-        mkdir -p /data/metadata
-        mkdir -p /data/parsed
+        mkdir -p "$DATA_DIR/metadata"
+        mkdir -p "$DATA_DIR/parsed"
         HUMAN_READABLE_TIMESTAMP=$(date -u -d @"$GENESIS_TIMESTAMP" +"%Y-%b-%d %I:%M:%S %p %Z")
         COMMENT="# $HUMAN_READABLE_TIMESTAMP"
         export MAX_REQUEST_BLOB_SIDECARS_ELECTRA=$(($MAX_REQUEST_BLOCKS_DENEB * $MAX_BLOBS_PER_BLOCK_ELECTRA))
         export MAX_REQUEST_BLOB_SIDECARS_FULU=$(($MAX_REQUEST_BLOCKS_DENEB * $MAX_BLOBS_PER_BLOCK_FULU))
-        envsubst < /config/cl/config.yaml > /data/metadata/config.yaml
-        sed -i "s/#HUMAN_TIME_PLACEHOLDER/$COMMENT/" /data/metadata/config.yaml
-        envsubst < /config/cl/mnemonics.yaml > $tmp_dir/mnemonics.yaml
+        envsubst < "$CONFIG_DIR/cl/config.yaml" > "$DATA_DIR/metadata/config.yaml"
+        sed -i "s/#HUMAN_TIME_PLACEHOLDER/$COMMENT/" "$DATA_DIR/metadata/config.yaml"
+        envsubst < "$CONFIG_DIR/cl/mnemonics.yaml" > "$tmp_dir/mnemonics.yaml"
         # Conditionally override values if preset is "minimal"
         if [[ "$PRESET_BASE" == "minimal" ]]; then
           gen_minimal_config
         fi
-        cp $tmp_dir/mnemonics.yaml /data/metadata/mnemonics.yaml
+        cp "$tmp_dir/mnemonics.yaml" "$DATA_DIR/metadata/mnemonics.yaml"
         # Create deposit_contract.txt and deploy_block.txt
-        grep DEPOSIT_CONTRACT_ADDRESS /data/metadata/config.yaml | cut -d " " -f2 > /data/metadata/deposit_contract.txt
-        echo $CL_EXEC_BLOCK > /data/metadata/deposit_contract_block.txt
-        echo $BEACON_STATIC_ENR > /data/metadata/bootstrap_nodes.txt
+        grep DEPOSIT_CONTRACT_ADDRESS "$DATA_DIR/metadata/config.yaml" | cut -d " " -f2 > "$DATA_DIR/metadata/deposit_contract.txt"
+        echo $CL_EXEC_BLOCK > "$DATA_DIR/metadata/deposit_contract_block.txt"
+        echo $BEACON_STATIC_ENR > "$DATA_DIR/metadata/bootstrap_nodes.txt"
         # Envsubst mnemonics
         if [ "$WITHDRAWAL_TYPE" == "0x00" ]; then
           export WITHDRAWAL_ADDRESS="null"
         fi
-        envsubst < /config/cl/mnemonics.yaml > $tmp_dir/mnemonics.yaml
+        envsubst < "$CONFIG_DIR/cl/mnemonics.yaml" > "$tmp_dir/mnemonics.yaml"
         # Generate genesis
         genesis_args+=(
           devnet
-          --config /data/metadata/config.yaml
-          --eth1-config /data/metadata/genesis.json
-          --mnemonics $tmp_dir/mnemonics.yaml
-          --state-output /data/metadata/genesis.ssz
-          --json-output /data/parsed/parsedConsensusGenesis.json
+          --config "$DATA_DIR/metadata/config.yaml"
+          --eth1-config "$DATA_DIR/metadata/genesis.json"
+          --mnemonics "$tmp_dir/mnemonics.yaml"
+          --state-output "$DATA_DIR/metadata/genesis.ssz"
+          --json-output "$DATA_DIR/parsed/parsedConsensusGenesis.json"
         )
 
         if [[ $SHADOW_FORK_FILE != "" ]]; then
@@ -102,17 +148,17 @@ gen_cl_config(){
           if [[ $CL_ADDITIONAL_VALIDATORS = /* ]]; then
             validators_file=$CL_ADDITIONAL_VALIDATORS
           else
-            validators_file="/config/$CL_ADDITIONAL_VALIDATORS"
+            validators_file="$CONFIG_DIR/$CL_ADDITIONAL_VALIDATORS"
           fi
           genesis_args+=(--additional-validators $validators_file)
         fi
         
-        /usr/local/bin/eth-beacon-genesis "${genesis_args[@]}"
+        eth-beacon-genesis "${genesis_args[@]}"
         echo "Genesis args: ${genesis_args[@]}"
-        echo "Genesis block number: $(jq -r '.latest_execution_payload_header.block_number' /data/parsed/parsedConsensusGenesis.json)"
-        echo "Genesis block hash: $(jq -r '.latest_execution_payload_header.block_hash' /data/parsed/parsedConsensusGenesis.json)"
-        jq -r '.eth1_data.block_hash' /data/parsed/parsedConsensusGenesis.json| tr -d '\n' > /data/metadata/deposit_contract_block_hash.txt
-        jq -r '.genesis_validators_root' /data/parsed/parsedConsensusGenesis.json | tr -d '\n' > /data/metadata/genesis_validators_root.txt
+        echo "Genesis block number: $(jq -r '.latest_execution_payload_header.block_number' "$DATA_DIR/parsed/parsedConsensusGenesis.json")"
+        echo "Genesis block hash: $(jq -r '.latest_execution_payload_header.block_hash' "$DATA_DIR/parsed/parsedConsensusGenesis.json")"
+        jq -r '.eth1_data.block_hash' "$DATA_DIR/parsed/parsedConsensusGenesis.json"| tr -d '\n' > "$DATA_DIR/metadata/deposit_contract_block_hash.txt"
+        jq -r '.genesis_validators_root' "$DATA_DIR/parsed/parsedConsensusGenesis.json" | tr -d '\n' > "$DATA_DIR/metadata/genesis_validators_root.txt"
     else
         echo "cl genesis already exists. skipping generation..."
     fi
@@ -124,7 +170,7 @@ gen_all_config(){
     gen_shared_files
 }
 
-case $1 in
+case $COMMAND in
   el)
     gen_el_config
     ;;
@@ -136,13 +182,18 @@ case $1 in
     ;;
   *)
     set +x
-    echo "Usage: [all|cl|el]"
+    echo "Usage: $(basename $0) [all|cl|el] [--data-dir=/path/to/data] [--config-dir=/path/to/config] [--defaults-env=/path/to/defaults.env] [--config-values=/path/to/values.env] [--el-gen-path=/path/to/generate_genesis.sh]"
+    echo "Options:"
+    echo "  --data-dir=PATH         Set custom data directory (default: $DEFAULT_DATA_DIR)"
+    echo "  --config-dir=PATH       Set custom config directory (default: $DEFAULT_CONFIG_DIR)"
+    echo "  --defaults-env=PATH     Set custom defaults env file (default: $DEFAULT_DEFAULTS_ENV)"
+    echo "  --config-values=PATH    Set custom config values file (default: $DEFAULT_CONFIG_VALUES)"
+    echo "  --el-gen-path=PATH      Set custom EL generator script path (default: $DEFAULT_EL_GEN_PATH)"
     exit 1
     ;;
 esac
 
 # Start webserver
 if [ "$SERVER_ENABLED" = true ] ; then
-  cd /data && exec python3 -m http.server "$SERVER_PORT"
+  cd "$DATA_DIR" && exec python3 -m http.server "$SERVER_PORT"
 fi
-
