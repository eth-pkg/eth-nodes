#!/usr/bin/env bash 

set -e 

display_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --conf-file FILE, -e FILE   Path to .conf formatted configuration file."    
    echo "  --help, -h                    Displays this help text and exits."
    echo "  --version, -v                 Displays the version and exits."
    exit 0
}

display_version() {
    local version=$(basename "$(dirname "$(realpath "$0")")")
    echo "$0 version $version"
    exit 0
}

CONFIG_FILES=()
HELP=false
VERSION=false

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --conf-file|-e)
            CONFIG_FILES+=("$2")
            shift 2
            ;;
        --help|-h)
            HELP=true
            shift
            ;;
        --version|-v)
            VERSION=true
            shift
            ;;  
        *)
            echo "Error: Unknown option $1"
            display_help
            ;;
    esac
done

if [ "$HELP" = true ]; then
    display_help
fi

if [ "$VERSION" = true ]; then
    display_version
fi

if [[ ${#CONFIG_FILES[@]} -eq 0 ]]; then
    echo "Error: At least one --conf-file option is required"
    display_help
fi

for CONFIG_FILE in "${CONFIG_FILES[@]}"; do
    if [[ -f "$CONFIG_FILE" ]]; then
        echo "Starting with configuration from $CONFIG_FILE"
        source "$CONFIG_FILE"
    else
        echo "Error: Configuration file $CONFIG_FILE not found."
        exit 1
    fi
done

echo "Starting with configuration from $CONFIG_FILE"

OPTIONS=""

append_option() {
  local option=$1
  local value=$2
  if [ -n "$value" ]; then
    OPTIONS="$OPTIONS $option=$value"
  fi
}

append_flag(){
 local option=$1
  local value=$2
  if [ "$value" = "true" ]; then
    OPTIONS="$OPTIONS $option"
  fi 
}

append_option "--config-file" "$config_file"
append_option "--log-level" "$log_level"
# append_option "--log-file" "$log_file"
append_option "--data-dir" "$datadir"
append_option "--doppelganger-detection" "$doppelganger_detection"
append_option "--non-interactive" "$non_interactive"
append_option "--validators-dir" "$validators_dir"
append_option "--verifying-web3-signer-url" "$verifying_web3_signer_url"
append_option "--proven-block-property" "$proven_block_property"
append_option "--web3-signer-update-interval" "$web3_signer_update_interval"
append_option "--web3-signer-url" "$web3_signer_url"
append_option "--secrets-dir" "$secrets_dir"
append_option "--rest-request-timeout" "$rest_request_timeout"
append_option "--rest-max-body-size" "$rest_max_body_size"
append_option "--rest-max-headers-size" "$rest_max_headers_size"
append_option "--suggested-fee-recipient" "$suggested_fee_recipient"
append_option "--suggested-gas-limit" "$suggested_gas_limit"
append_option "--keymanager" "$keymanager"
append_option "--keymanager-port" "$keymanager_port"
append_option "--keymanager-address" "$keymanager_address"
append_option "--keymanager-allow-origin" "$keymanager_allow_origin"
append_option "--keymanager-token-file" "$keymanager_token_file"
append_option "--metrics" "$metrics"
append_option "--metrics-address" "$metrics_address"
append_option "--metrics-port" "$metrics_port"
append_option "--graffiti" "$graffiti"
append_option "--debug-stop-at-epoch" "$debug_stop_at_epoch"
append_option "--payload-builder" "$payload_builder"
append_option "--distributed" "$distributed"
append_option "--builder-boost-factor" "$builder_boost_factor"
append_option "--beacon-node" "$beacon_node"
append_option "--block-monitor-type" "$block_monitor_type"



echo "Using Options /usr/lib/eth-node-nimbus-eth2/bin/validator: $OPTIONS"

# TODO generated by hand, need to fix this
# /usr/lib/eth-node-nimbus-eth2/bin/nimbus_beacon_node deposits import \
#    "/var/lib/eth-node-regtest/nimbus-eth2-validator/keys" \
#   --data-dir:/var/lib/eth-node-regtest/nimbus-eth2-validator 

# TODO 
exec /usr/lib/eth-node-nimbus-eth2/bin/nimbus_validator_client $OPTIONS > $log_file